#!/usr/bin/env bash

if [ -z "$(git status -s -uno | grep -v '^ ' | awk '{print $2}')" ]; then
    gum confirm "Stage all?" && git add .
fi

PROMPT=$(cat <<DELIMITER
<instruction>
Create conventional commit message.
Just output commit message and commit description.

# Commit types
------------------------------------------------
build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
ci: Changes to CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)
chore: Changes which doesn't change source code or tests e.g. changes to the build process, auxiliary tools, libraries
docs: Documentation only changes
feat: A new feature
fix: A bug fix
perf: A code change that improves performance
refactor: A code change that neither fixes a bug nor adds a feature
revert: Revert something
style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
test: Adding missing tests or correcting existing tests
</instruction>

<examples>
<example>
feat(n8n): add docker configuration and data setting

- Update .gitignore for ignoring folder data exept .gitkeep file
- Add .gitkeep file on folder data
- Add docker-compose.yaml file for n8n configuration
</example>

<example>
feat: add redis as dependencies and n8n-network

- Add redis as dependencies
- Add n8n-network for connecting redis and n8n.
- Add commit and runner script for helping on command line simplicity
</example>
</examples>
DELIMITER
)

MESSAGE=$(git diff --staged | mods -f -q "$PROMPT")

MESSAGE=$(echo "$MESSAGE" | gum write --height=10 --header "Review commit message")

echo "$MESSAGE" > .diff

gum confirm "Commit changes?" && git commit -F .diff
